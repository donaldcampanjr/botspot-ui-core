{
  "version": 3,
  "sources": ["../../../workers/auth-worker.js", "../../../../../root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-BOhPDi/middleware-insertion-facade.js", "../../../../../root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-BOhPDi/middleware-loader.entry.ts"],
  "sourceRoot": "/app/code/.wrangler/tmp/dev-vFQCQ2",
  "sourcesContent": ["export default {\n  async fetch(request, env) {\n    const url = new URL(request.url)\n    const { pathname } = url\n\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': env.APP_BASE_URL,\n      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, apikey',\n      'Access-Control-Allow-Credentials': 'true',\n    }\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders })\n    }\n\n    // Helpers\n    const RATE = { windowMs: 5 * 60 * 1000, max: 10 }\n    const ip = request.headers.get('CF-Connecting-IP') || request.headers.get('x-forwarded-for') || 'anon'\n    // @ts-ignore - global scope persistence within instance\n    self.__ipHits = self.__ipHits || new Map()\n    function isRateLimited(bucket) {\n      const key = `${ip}:${bucket}`\n      const now = Date.now()\n      const arr = self.__ipHits.get(key) || []\n      const fresh = arr.filter((t) => now - t < RATE.windowMs)\n      if (fresh.length >= RATE.max) return true\n      fresh.push(now)\n      self.__ipHits.set(key, fresh)\n      return false\n    }\n\n    async function parseBody(req) {\n      try { return await req.json() } catch { return {} }\n    }\n    function withHeaders(extra = {}) {\n      return { ...corsHeaders, ...extra }\n    }\n    async function supabaseFetch(endpoint, method, body, key = env.SUPABASE_ANON_KEY) {\n      return fetch(`${env.SUPABASE_URL}${endpoint}`, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          apikey: key,\n          Authorization: `Bearer ${key}`,\n        },\n        body: body ? JSON.stringify(body) : undefined,\n      })\n    }\n    async function sendWelcomeEmail(email) {\n      if (!env.RESEND_API_KEY || !env.RESEND_FROM) return\n      try {\n        await fetch('https://api.resend.com/emails', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${env.RESEND_API_KEY}`,\n          },\n          body: JSON.stringify({\n            from: env.RESEND_FROM,\n            to: email,\n            subject: 'Welcome to BotSpot \uD83C\uDF89',\n            html: `<p>Hi ${email}, welcome to BotSpot! Your account is ready.</p>`\n          }),\n        })\n      } catch {}\n    }\n\n    // Health check\n    if (pathname === '/api/auth/hello') {\n      return new Response(JSON.stringify({ message: 'Worker is live \u2705' }), {\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // REGISTER\n    if (pathname === '/api/auth/register' && request.method === 'POST') {\n      if (isRateLimited('register')) {\n        return new Response(JSON.stringify({ error: 'Too many requests' }), {\n          status: 429,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n      const { email, password } = await parseBody(request)\n      if (!email || !password) {\n        return new Response(JSON.stringify({ error: 'Email and password required' }), {\n          status: 400,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      const res = await supabaseFetch('/auth/v1/signup', 'POST', { email, password })\n      const data = await res.json().catch(() => ({}))\n\n      if (!res.ok) {\n        const errorMsg = data?.msg || data?.error_description || 'Registration failed'\n        return new Response(JSON.stringify({\n          error: errorMsg,\n          debug: {\n            status: res.status,\n            response: data,\n            timestamp: new Date().toISOString()\n          }\n        }), {\n          status: res.status,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      // Ensure we have user data from Supabase response\n      let user = data?.user || null\n      const debugInfo = {\n        roleEnrichmentAttempts: [],\n        emailSent: false,\n        autoLogin: false\n      }\n\n      // Note: user_roles insertion is handled by database trigger (on_auth_user_created)\n      // We only need to update user metadata and potentially fetch the role\n      if (env.SUPABASE_SERVICE_ROLE_KEY && user?.id) {\n        // Skip manual role insertion - it's handled by the database trigger\n        debugInfo.roleEnrichmentAttempts.push({\n          type: 'role_table_insert',\n          success: true,\n          status: 'skipped_trigger_handles_it'\n        })\n\n        // Role will be set later during onboarding wizard\n        debugInfo.roleEnrichmentAttempts.push({\n          type: 'user_metadata_update',\n          success: true,\n          status: 'skipped_will_be_set_in_onboarding'\n        })\n\n        // User starts with no role - will be assigned in onboarding\n        user.user_metadata = { ...(user.user_metadata || {}) }\n        user.role = null\n      } else {\n        debugInfo.roleEnrichmentAttempts.push({\n          type: 'skipped',\n          reason: !env.SUPABASE_SERVICE_ROLE_KEY ? 'No service role key' : 'No user ID'\n        })\n      }\n\n      // Auto-login after successful signup\n      const loginRes = await supabaseFetch('/auth/v1/token?grant_type=password', 'POST', { email, password })\n      const loginData = await loginRes.json().catch(() => ({}))\n\n      // Fire-and-forget welcome email (works even without RESEND_API_KEY)\n      try {\n        await sendWelcomeEmail(email)\n        debugInfo.emailSent = !!env.RESEND_API_KEY\n      } catch (error) {\n        debugInfo.emailSent = false\n      }\n\n      if (loginRes.ok && loginData?.access_token) {\n        debugInfo.autoLogin = true\n        return new Response(JSON.stringify({\n          success: true,\n          user,\n          debug: debugInfo\n        }), {\n          headers: withHeaders({\n            'Content-Type': 'application/json',\n            'Set-Cookie': `sb:token=${loginData.access_token}; HttpOnly; Path=/; SameSite=Lax${env.APP_BASE_URL && env.APP_BASE_URL.startsWith('https') ? '; Secure' : ''}`,\n          }),\n        })\n      }\n\n      // If cannot auto-login, still return success with user data\n      debugInfo.autoLogin = false\n      return new Response(JSON.stringify({\n        success: true,\n        user,\n        debug: debugInfo\n      }), {\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // LOGIN\n    if (pathname === '/api/auth/login' && request.method === 'POST') {\n      if (isRateLimited('login')) {\n        return new Response(JSON.stringify({ error: 'Too many requests' }), {\n          status: 429,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n      const { email, password } = await parseBody(request)\n      if (!email || !password) {\n        return new Response(JSON.stringify({ error: 'Email and password required' }), {\n          status: 400,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      const res = await supabaseFetch('/auth/v1/token?grant_type=password', 'POST', { email, password })\n      const data = await res.json().catch(() => ({}))\n\n      if (res.ok && data?.access_token) {\n        return new Response(JSON.stringify({ success: true }), {\n          headers: withHeaders({\n            'Content-Type': 'application/json',\n            'Set-Cookie': `sb:token=${data.access_token}; HttpOnly; Path=/; Secure; SameSite=Lax`,\n          }),\n        })\n      }\n\n      return new Response(JSON.stringify({ error: data?.error_description || 'Invalid credentials' }), {\n        status: res.status,\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // LOGOUT\n    if (pathname === '/api/auth/logout' && request.method === 'POST') {\n      return new Response(JSON.stringify({ success: true }), {\n        headers: withHeaders({\n          'Content-Type': 'application/json',\n          'Set-Cookie': `sb:token=; HttpOnly; Path=/; SameSite=Lax${env.APP_BASE_URL && env.APP_BASE_URL.startsWith('https') ? '; Secure' : ''}; Max-Age=0`,\n        }),\n      })\n    }\n\n    // VERIFY\n    if (pathname === '/api/auth/verify') {\n      const cookie = request.headers.get('Cookie') || ''\n      const token = cookie.split('sb:token=')[1]?.split(';')[0]\n\n      if (!token) {\n        return new Response(JSON.stringify({ loggedIn: false }), {\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      const res = await fetch(`${env.SUPABASE_URL}/auth/v1/user`, {\n        headers: {\n          apikey: env.SUPABASE_ANON_KEY,\n          Authorization: `Bearer ${token}`,\n        },\n      })\n\n      if (res.ok) {\n        const user = await res.json()\n        try {\n          if (env.SUPABASE_SERVICE_ROLE_KEY && user?.id) {\n            const r = await fetch(`${env.SUPABASE_URL}/rest/v1/user_roles?user_id=eq.${user.id}&select=role`, {\n              headers: {\n                apikey: env.SUPABASE_SERVICE_ROLE_KEY,\n                Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE_KEY}`,\n              },\n            })\n            const roles = await r.json().catch(() => [])\n            const role = roles?.[0]?.role || 'Daily User'\n            user.user_metadata = { ...(user.user_metadata || {}), role }\n            user.role = role\n          }\n        } catch {}\n        return new Response(JSON.stringify({ loggedIn: true, user }), {\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      return new Response(JSON.stringify({ loggedIn: false }), {\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // RESEND VERIFICATION (optional)\n    if (pathname === '/api/auth/resend-verification' && request.method === 'POST') {\n      if (isRateLimited('resend')) {\n        return new Response(JSON.stringify({ error: 'Too many requests' }), {\n          status: 429,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n      const { email } = await parseBody(request)\n      if (!email) {\n        return new Response(JSON.stringify({ error: 'Email required' }), {\n          status: 400,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n      try {\n        if (env.RESEND_API_KEY && env.RESEND_FROM) {\n          await fetch('https://api.resend.com/emails', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${env.RESEND_API_KEY}`,\n            },\n            body: JSON.stringify({\n              from: env.RESEND_FROM,\n              to: email,\n              subject: 'Verify your BotSpot email',\n              html: `<p>Hi ${email}, if your account requires verification, please check your inbox for the confirmation link. If you didn't request this, ignore this email.</p>`,\n            }),\n          })\n        }\n      } catch {}\n      return new Response(JSON.stringify({ success: true }), {\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // VERIFY EMAIL (proxy to Supabase)\n    if (pathname.startsWith('/api/auth/verify-email')) {\n      const params = new URL(request.url).searchParams\n      const token = params.get('token') || params.get('token_hash')\n      if (!token) {\n        return new Response(JSON.stringify({ error: 'Missing token' }), {\n          status: 400,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n      // Try both variants for compatibility\n      let ok = false\n      try {\n        const r1 = await fetch(`${env.SUPABASE_URL}/auth/v1/verify?type=signup&token_hash=${encodeURIComponent(token)}`, {\n          headers: { apikey: env.SUPABASE_ANON_KEY },\n        })\n        ok = r1.ok\n      } catch {}\n      if (!ok) {\n        try {\n          const r2 = await fetch(`${env.SUPABASE_URL}/auth/v1/verify`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', apikey: env.SUPABASE_ANON_KEY },\n            body: JSON.stringify({ type: 'signup', token }),\n          })\n          ok = r2.ok\n        } catch {}\n      }\n      return new Response(JSON.stringify({ success: ok }), {\n        status: ok ? 200 : 400,\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // ME\n    if (pathname === '/api/auth/me') {\n      const cookie = request.headers.get('Cookie') || ''\n      const token = cookie.split('sb:token=')[1]?.split(';')[0]\n\n      if (!token) {\n        return new Response(JSON.stringify({ loggedIn: false }), {\n          status: 401,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      const res = await fetch(`${env.SUPABASE_URL}/auth/v1/user`, {\n        headers: {\n          apikey: env.SUPABASE_ANON_KEY,\n          Authorization: `Bearer ${token}`,\n        },\n      })\n\n      const data = await res.json().catch(() => ({}))\n      try {\n        if (env.SUPABASE_SERVICE_ROLE_KEY && data?.id) {\n          const r = await fetch(`${env.SUPABASE_URL}/rest/v1/user_roles?user_id=eq.${data.id}&select=role`, {\n            headers: {\n              apikey: env.SUPABASE_SERVICE_ROLE_KEY,\n              Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE_KEY}`,\n            },\n          })\n          const roles = await r.json().catch(() => [])\n          const role = roles?.[0]?.role || 'Daily User'\n          data.user_metadata = { ...(data.user_metadata || {}), role }\n          data.role = role\n        }\n      } catch {}\n      return new Response(JSON.stringify({ loggedIn: res.ok, user: data }), {\n        status: res.status,\n        headers: withHeaders({ 'Content-Type': 'application/json' }),\n      })\n    }\n\n    // UPDATE ROLE\n    if (pathname === '/api/auth/role' && request.method === 'PUT') {\n      const cookie = request.headers.get('Cookie') || ''\n      const token = cookie.split('sb:token=')[1]?.split(';')[0]\n\n      if (!token) {\n        return new Response(JSON.stringify({ error: 'Authentication required' }), {\n          status: 401,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      // Verify user is authenticated\n      const userRes = await fetch(`${env.SUPABASE_URL}/auth/v1/user`, {\n        headers: {\n          apikey: env.SUPABASE_ANON_KEY,\n          Authorization: `Bearer ${token}`,\n        },\n      })\n\n      if (!userRes.ok) {\n        return new Response(JSON.stringify({ error: 'Invalid authentication' }), {\n          status: 401,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      const user = await userRes.json()\n      const { role } = await parseBody(request)\n\n      // Validate role\n      const validRoles = ['Influencer', 'Artist', 'Band', 'Business', 'Daily User']\n      if (!role || !validRoles.includes(role)) {\n        return new Response(JSON.stringify({\n          error: 'Invalid role. Must be one of: Influencer, Artist, Band, Business, Daily User'\n        }), {\n          status: 400,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n\n      try {\n        // Update role in user_roles table\n        if (env.SUPABASE_SERVICE_ROLE_KEY) {\n          const roleUpdateRes = await fetch(`${env.SUPABASE_URL}/rest/v1/user_roles?user_id=eq.${user.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n              apikey: env.SUPABASE_SERVICE_ROLE_KEY,\n              Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE_KEY}`,\n              Prefer: 'return=minimal',\n            },\n            body: JSON.stringify({ role }),\n          })\n\n          if (!roleUpdateRes.ok) {\n            return new Response(JSON.stringify({ error: 'Failed to update role in database' }), {\n              status: 500,\n              headers: withHeaders({ 'Content-Type': 'application/json' }),\n            })\n          }\n\n          // Update user metadata for consistency\n          const metadataRes = await fetch(`${env.SUPABASE_URL}/auth/v1/admin/users/${user.id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n              apikey: env.SUPABASE_SERVICE_ROLE_KEY,\n              Authorization: `Bearer ${env.SUPABASE_SERVICE_ROLE_KEY}`,\n            },\n            body: JSON.stringify({\n              user_metadata: { ...(user.user_metadata || {}), role }\n            }),\n          })\n\n          return new Response(JSON.stringify({\n            success: true,\n            role,\n            metadata_updated: metadataRes.ok\n          }), {\n            headers: withHeaders({ 'Content-Type': 'application/json' }),\n          })\n        } else {\n          return new Response(JSON.stringify({ error: 'Service role key not configured' }), {\n            status: 500,\n            headers: withHeaders({ 'Content-Type': 'application/json' }),\n          })\n        }\n      } catch (error) {\n        return new Response(JSON.stringify({\n          error: 'Failed to update role',\n          detail: error.message\n        }), {\n          status: 500,\n          headers: withHeaders({ 'Content-Type': 'application/json' }),\n        })\n      }\n    }\n\n    // Default 404\n    return new Response(JSON.stringify({ error: 'Not Found' }), {\n      status: 404,\n      headers: withHeaders({ 'Content-Type': 'application/json' }),\n    })\n  },\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/app/code/workers/auth-worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/app/code/workers/auth-worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/app/code/.wrangler/tmp/bundle-BOhPDi/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/root/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/app/code/.wrangler/tmp/bundle-BOhPDi/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/app/code/.wrangler/tmp/bundle-BOhPDi/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
